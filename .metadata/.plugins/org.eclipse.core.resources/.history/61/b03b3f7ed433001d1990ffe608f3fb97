package com.basic.step1.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.basic.step1.dao.BoardDao;
@Service
public class BoardLogic {
	Logger logger = LoggerFactory.getLogger(BoardLogic.class);

	@Autowired(required=false)
	private BoardDao boardDao = null;
//	로직에서는 그대로 모두 사용함 - RequestParam이나 RequestMapping, Model 모두 필요 없음
//	공통된 관심사는 트랜잭션 처리 - 하나의 메소드에서 Dao에 두 개 메소드 호출
//	board_master_t, board_sub_t

	public List<Map<String, Object>> boardList(Map<String, Object> pMap) {
		logger.info("boardList 호출 성공");
		List<Map<String, Object>> boardList = null;
		boardList = boardDao.boardList(pMap);
		return boardList;
	}

	public int boardInsert(Map<String, Object> pMap) {
		logger.info("boardInsert 호출 성공");
		int result = 0;
		int b_no = 0;
		int b_group = 0;
		// 글번호 채번할 때 한 번--------------------------------------------------
		b_no = boardDao.getBNo();
		pMap.put("b_no", b_no);
		if(pMap.get("b_group")!=null) {
			b_group = Integer.parseInt(pMap.get("b_group").toString());
		}
		// 댓글 쓰기
		if(b_group > 0) {
//			아래 코드는 내 뒤에 댓글이 있을 때에만 처리가 됨
			// 내 뒤에 댓글있으면 두 번---------------------------------------------
			boardDao.bStepUpdate(pMap);
			pMap.put("b_pos",  Integer.parseInt(pMap.get("b_pos").toString())+1);
			pMap.put("b_step", Integer.parseInt(pMap.get("b_step").toString())+1);
		}
		// 새글 쓰기
		else {
			// 새글 쓰기에서는 댓글 쓰기와는 다르게 그룹번호를 새로 채번해야 함
			// 새 글일 때, 그룹번호 채번할 떄 세 번 -----------------------------------
			b_group = boardDao.getBGroup();
			pMap.put("b_group", b_group);
			pMap.put("b_pos", 0);
			pMap.put("b_step", 0);
		}
		result = boardDao.boardInsert(pMap); // 새 글 쓰기, 댓글 쓰기, 
		// 첨부파일이 있는 경우에만 board_sub_t 추가함
		return result;
	}
}

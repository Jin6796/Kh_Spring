<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
<!-- 
	AspectJ 프레임워크 일부임 - spring-aop.jar, spring-tx.jar, ojdbc6.jar, spring-jsdc.jar
	AOP는 공통적으로 사용하는 것들에 대한 의존관계의 복잡성과 코드의 중복성을 해소해주는 프로그래밍 기법.
	(con.setAutoCommit(false); con.commit(); con.setAutoCommit(true);
	코드의 중복성?
	AOP의 역할? - 공통된 관심사(트랜잭션 처리)를 가진 클래스 계층을 분리해줌. (XXXLogic.java)
	개입을 할 수 있다. (before, after)
	DI가 소프트웨어 컴포넌트의 결합도를 낮춘다면 AOP는 ㅇㅓ플리케이션 전체에 걸쳐 사용되는 기능들을 재사용할 수 있게 해줌 
	AOP를 통해서 얻을 수 있는 장점 >> 별도의 자바코드를 추가하지 않고도 트랜잭션 처리가 가능하다!?!?!?
	
	어떤 클래스에 어떤 메소드가 적용할 것인가?
	어노테이션을 사용하는 경우와 그렇지 않은 경우 어노테이션은 클래스 안에 메소드 안에 직접 작성하므로 예외
	:정규식을 이용해서 적용할 수 있게 하였다.
	:expression속성을 이용해서 설정할 수 있다.
	expression(* com.mvc.*Logic.*(..)) //클래스 풀네임
	-> return type이 any type(String, void, ModelAndView이고 
		0개 이상의 any type parameter을 가진 클래스 이름이 Logic으로 끝나는 모든 메소드에 대해 적용됨.
		
	하나의 로직이 두개 혹은 세개의 Dao[DML-커밋/롤백의 대상이 되는..:i, u, d]호출이 연계됨.	
	
	pointcut - 어디에서 처리? > 정규식으로 처리함 > 메소드 위에 직접 처리함(간단)
	공통된 관심사 - XXXLogic - 비즈니스로직 - if, for, choice 2개 이상의 DAO 메소드콜 - 매번 커밋? 한 번 커밋?
	Connection con = DriverManager.getConnection(URL, username, password);
	con.setAutoCommited(false); // 수동처리 ->>> 스프링에게 맡기자! >>> 코딩을 안해도 됨! 오예! 로직구현에 집중하자!
	Stratement stmt = con.createStatement();
	con.setAutocommit(false) con.commit(), con.setAutocommit(true); 매번(주문관리, 재고관리, 결제관리) 반복
	자바코드로 하지 말고 xml로 하자 - 자바(annotation)
	* com.spring4.tr.*Logic.*(..)
	
	advisor - 무엇을 처리?
	
	XXXLogic에 메소드 접두어가 do로 시작되었다.
	건건이
	한번에
	
	횡단관심 기능은 등록, 수정, 삭제 기능을 한느 비즈니스 메소드들에 대해서는 당연히 동작해야 하지만
	SELECT와 같은 검색 기능을 하는 비즈니스 로직(업무적인 기능을 구현하는 계층)이 있다면 그 메소드에 대해서는
	트랜잭션과 무관하기 때문에 동작할 필요가 없다.
	
	이렇게 많은 비즈니스 메소드 중 우리가 원하는 특정 메소드에 대해서만 횡단관심에 해당하는 공통 기능을
	자동(개발자의 추가코드없이도) 수행하도록 만들기 위해서는 포인트 컷이 필요하다.
	aop:pointcut에는 execution이라는 명시자를 사용가능.
	Advice를 적용할 메소드를 명시할 때 사용함.
	
	포인트컷은 <aop:pointcut/>으로 지정하고 id속성으로 포인트컷을 식별하기 위한 유일한 문자열을 선언.
	이 id값이 나중에 포인트컷을 참조할 때 사용된다.
--> 
	<bean id="afterThrowing" class="com.spring4.tr.AfterThrowingAdvice" />
	<bean id="board-logic" class="com.spring4.mvc.BoardLogic">
		<property name="boardDao" ref="board-dao" />
	</bean>	<bean id="auth-logic" class="com.spring4.mvc.AuthLogic">
		<property name="authDao" ref="auth-dao" />
	</bean>
	<bean id="dept-logic" class="com.spring4.tr.DeptLogic">
		<property name="deptDao" ref="dept-dao" />
	</bean>
	<bean id="emp-logic" class="com.spring4.tr.EmpLogic">
		<property name="empDao" ref="emp-dao" />
		<property name="deptDao" ref="dept-dao" />
	</bean>
	<!-- 트랜잭션 처리 설정 시작 -->
	<aop:config>
		<aop:pointcut id="point-cut" expression="execution(* com.spring4.tr.*Logic.*(..))" />
		<aop:advisor advice-ref="tx-advice" pointcut-ref="point-cut"/>
		<aop:aspect ref="afterThrowing">
			<aop:after method="exceptionMsg" pointcut-ref="point-cut" />
		</aop:aspect>
	</aop:config>
	<tx:advice id="tx-advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="do*" />
			<tx:method name="cud*" />
		</tx:attributes>
	</tx:advice>
	<!-- 트랜잭션 처리 설정 끝  -->
</beans>
